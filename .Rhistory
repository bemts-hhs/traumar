dplyr::select(bin_number, bin_start, bin_end) |>
dplyr::mutate(midpoint = bin_start + (bin_end - bin_start) / 2) |>
dplyr::arrange(bin_number) # Sort the bins by bin_number to maintain the correct order
# Initialize final_data by adding a new column `bin_number` to store the bin assignment
# Initially, all rows are assigned to bin 0 (unclassified).
final_data <- data |>
dplyr::mutate(bin_number = 0L) # Create a column to store bin labels (initialized to 0)
# Classify rows from final_data into appropriate bins based on POS score
# Iterate over the rows of bin_df and update the bin_number for each row
for (i in 1:nrow(bin_df)) {
# Assign bin_number to rows where the POS score falls within the current bin's range
final_data <- final_data |>
dplyr::mutate(
bin_number = dplyr::if_else(
{{ Ps_col }} >= bin_df$bin_start[i] & {{ Ps_col }} <= bin_df$bin_end[i],
i, # Assign the current bin_number (i) if the POS score fits within the bin's range
bin_number # Otherwise, retain the existing bin_number
)
)
}
# Summarize bin-level statistics:
# - `TA_b`: Total alive (patients in the bin that survived)
# - `TD_b`: Total dead (patients in the bin that did not survive)
# - `N_b`: Total number of observations (patients in the bin)
# - `EM_b`: Estimated mortality for the bin (TD_b / (TA_b + TD_b))
bin_summary <- final_data |>
dplyr::summarize(
TA_b = sum({{ outcome_col }}, na.rm = TRUE), # Total number of survivors in the bin
TD_b = sum({{ outcome_col }} == 0, na.rm = TRUE), # Total number of deaths in the bin
N_b = n(), # Total number of patients in the bin
EM_b = TD_b / (TA_b + TD_b), # Estimated mortality rate (TD_b / total patients in bin)
.by = bin_number # Calculate these statistics for each bin
) |>
dplyr::arrange(bin_number) # Sort the bins by bin_number
# Join the bin-level statistics (bin_summary) with the bin information (bin_df)
# This allows us to access both the statistics and the bin definitions for further calculations
bin_summary <- bin_summary |>
dplyr::left_join(bin_df, by = "bin_number") |>
dplyr::mutate(
R_b = bin_end - bin_start, # Bin width (R_b = bin_end - bin_start)
AntiM_b = -1 * midpoint + 1, # Anticipated mortality (1 - midpoint, reversed scale to match the method)
E_b = Z * sqrt((AntiM_b * (1 - AntiM_b)) / N_b), # Error bound (E_b) based on bin size and the anticipated mortality
numerator = R_b * (AntiM_b - EM_b), # Weighted numerator (difference between anticipated and observed mortality)
denominator = R_b * AntiM_b, # Weighted denominator (anticipated mortality)
RMM = numerator / denominator, # Final RMM calculation,
RMM_UL = RMM + E_b, # upper 95% CI limit
RMM_UL = dplyr::if_else(RMM_UL > 1, 1, RMM_UL), # correct CI > 1
RMM_LL = RMM - E_b, # lower 95% CI limit
RMM_LL = dplyr::if_else(RMM_LL < -1, -1, RMM_LL), # correct CI > 1
.by = bin_number # Ensure calculations are done per bin
) |>
dplyr::relocate(RMM_LL, .before = RMM)
# Return the summarized bin metrics as a tibble, containing:
# - Total alive (TA_b)
# - Total dead (TD_b)
# - Estimated mortality (EM_b)
# - Anticipated mortality (AntiM_b)
# - Error bound (E_b)
# - Bin width (R_b)
# - RMM numerator
# - RMM denominator
# - RMM calculation per bin
# - RMM upper limit
# - RMM lower limit
bin_summary
}
# Generate example data with high negative skewness
set.seed(123)
survival_probs <- rbeta(1000, shape1 = 5, shape2 = 1)
outcomes <- sample(c(0, 1), 1000, replace = TRUE)
example_data <- data.frame(patient_id = 1:1000, survival_probability = survival_probs, outcome = outcomes)
# Example usage of the `rmm` function
rm_bin_summary(data = example_data, Ps_col = survival_probability, outcome_col = outcome)
# Generate example data with high negative skewness
set.seed(123)
survival_probs <- rbeta(1000, shape1 = 5, shape2 = 1)
outcomes <- sample(c(0, 1), 1000, replace = TRUE)
example_data <- data.frame(patient_id = 1:1000, survival_probability = survival_probs, outcome = outcomes)
# Example usage of the `rmm` function
rmm(data = example_data, Ps_col = survival_probability, outcome_col = outcome, pivot = T)
# Generate example data with high negative skewness
set.seed(123)
survival_probs <- rbeta(1000, shape1 = 5, shape2 = 1)
outcomes <- sample(c(0, 1), 1000, replace = TRUE)
example_data <- data.frame(patient_id = 1:1000, survival_probability = survival_probs, outcome = outcomes)
# Example usage of the `rmm` function
rmm(data = example_data, Ps_col = survival_probability, outcome_col = outcome)
weekdays(as.Date("2024-01-01"))
weekdays(as.Date("2024-01-01"), abbreviate = T)
#' The function returns "Weekday" for Monday to Friday and "Weekend" for Saturday and Sunday.
#'
#' @param input_date A vector of `Date` or `POSIXct` objects to classify.
#'
#' @return A character vector with the classification for each date: either "Weekday" or "Weekend".
#'
#' @details The function checks if the `input_date` is a valid `Date` or `POSIXct` object. It returns "Weekday" for dates that fall on Monday through Friday and "Weekend" for dates that fall on Saturday or Sunday. If the input is not of the correct class, the function will throw an error.
#'
#' @author Nicolas Foss, Ed.D., MS
#'
weekend <- function(input_date) {
#check if the value supplied is in fact Date or POSIXct
if (!is.Date(input_date) & !is.POSIXct(input_date)) {
cli::cli_abort(
paste0(
"The input to {.var input_date} must be an object of class {.cls Date} or {.cls POSIXct}, but you supplied an object of class {.cls {class(input_date)}}.",
"i" = "Supply a {.cls Date} object to {.fn weekend}."
)
)
}
# Get the day of the week
day_of_week <- weekdays(input_date, abbreviate = F)
# Classify as Weekday or Weekend
classification <- ifelse(
day_of_week %in% c("Saturday", "Sunday"), "Weekend",
ifelse(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday", "Undetermined")
)
return(classification)
}
# Example 1: Date of a weekend
weekend(as.Date("2025-01-18"))
# Returns: "Weekend"
# Example 2: Date of a weekday
weekend(as.Date("2025-01-15"))
# Returns: "Weekday"
# Example 3: Date of an invalid object
# This will stop execution with an error message
weekend("2025-01-18")
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
rm(list = c("nonlinear_bins", "pretty_number", "rm_bin_summary", "rmm", "weekend"))
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_performance
example("trauma_performance", package = "traumar")
example("example", package = "traumar")
args(trauma_performance)
?rmm
rm(outcomes)
rm(survival_probs)
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_performance
?trauma_case_mix
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_case_mix
?trauma_case_mix
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_performance
?trauma_case_mix
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_case_mix
?trauma_performance
roxygenize(package.dir = "C:/Users/nfoss0/OneDrive - State of Iowa HHS/Desktop/Analytics/Analytics Builds/GitHub/traumar/")
?trauma_case_mix
View(example_data)
devtools::load_all()
devtools::install()
devtools::check()
usethis::use_latest_dependencies()
?traumar
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::install()
?traumar
?messy
devtools::check()
R.Version()
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenize()
devtools::update_packages()
devtools::document()
devtools::load_all()
devtools::install()
usethis::use_git()
gitcreds::gitcreds_set()
usethis::use_github(private = F, visibility = "public")
usethis::use_github("origin", private = F, visibility = "public", url = NULL, overwrite = T)
usethis::use_git_remote("origin", url = NULL, overwrite = T)
usethis::use_git_remote()
usethis::use_git_remote(url = "https://github.com/bemts-hhs/traumar")
usethis::use_git_remote(url = "https://github.com/bemts-hhs/traumar", overwrite = T)
gitcreds::gitcreds_set()
renv::status()
devtools::load_all()
devtools::install()
set.seed(1234)
data_for_bins <- data.frame(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)),
survival = rbinom(1000, 1, prob = 0.90)
)
data_boot <- data_for_bins |>
infer::generate(reps = 1000, type = "bootstrap") |>
dplyr::ungroup()
final_data <- data_boot |>
dplyr::mutate(bin_number = 0L)
test_dataframe <- data_boot |>
dplyr::ungroup() |>
tidyr::nest(data = -replicate) |>
dplyr::mutate(
bins = purrr::map(data, ~ nonlinear_bins(.x, Ps_col = Ps, outcome_col = survival)),
bin_stats_temp = purrr::map(bins, ~ .x$bin_stats)
) |>
dplyr::select(-bins) |>
tidyr::unnest(bin_stats_temp)
View(test_dataframe)
data_boot |>
rmm(Ps_col = Ps, outcome_col = survival, Divisor1 = 3, Divisor2 = 3)
data_for_bins |>
rmm(Ps_col = Ps, outcome_col = survival, Divisor1 = 3, Divisor2 = 3)
rlang::last_trace()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
data_for_bins |>
rmm(Ps_col = Ps, outcome_col = survival, Divisor1 = 3, Divisor2 = 3)
covr::report()
usethis::use_coverage()
devtools::test_coverage()
covr::codecov()
usethis::use_github_action()
usethis::use_github_action()
usethis::use_covr_ignore()
devtools::document()
devtools::check()
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
covr::codecov()
?covr::code_coverage
?covr::codecov
covr::codecov()
covr::package_coverage()
devtools::test_coverage()
# Test the nonlinear_bins function (mocked for now)
test_that("nonlinear_bins produces correct bin data", {
# Mock input data for testing
data <- tibble(
Ps_col = runif(100, 0, 1),
outcome_col = sample(c(0, 1), 100, replace = TRUE),
alive = sample(50:100, 100, replace = TRUE),
dead = sample(0:50, 100, replace = TRUE),
count = sample(10:50, 100, replace = TRUE),
replicate = sample(1:10, 100, replace = TRUE),
bin_number = sample(1:5, 100, replace = TRUE),
bin_start = sample(0:50, 5),
bin_end = sample(51:100, 5)
)
bin_data <- nonlinear_bins(
data,
Ps_col = "Ps_col",
outcome_col = "outcome_col",
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
expect_true("bin_stats" %in% names(bin_data))
expect_true("intervals" %in% names(bin_data))
expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps_col,
outcome_col = outcome_col,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
load_all()
devtools::load_all()
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps_col,
outcome_col = outcome_col,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps_col,
outcome_col = survival,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 5,
divisor2 = 5,
threshold_1 = 0.9,
threshold_2 = 0.99
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 5,
divisor2 = 5,
threshold_1 = 0.9,
threshold_2 = 0.99
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 10)  # assuming 5 bins
})
testthat::test_that("bootstrap data has the correct number of samples", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bootstrap_data <- df |>
infer::generate(reps = 100, type = "bootstrap")
testthat::expect_equal(nrow(bootstrap_data), 100 * nrow(df))
})
testthat::test_that("bin statistics are calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
try_function <- rm_bin_summary(df, Ps, survival, n_samples = 100)
bin_summary <- df |>
dplyr::summarize(
TA_b = sum(alive, na.rm = TRUE),
TD_b = sum(dead, na.rm = TRUE),
N_b = sum(count),
EM_b = TD_b / N_b
)
testthat::expect_true("TA_b" %in% names(try_function))
testthat::expect_true("TD_b" %in% names(try_function))
testthat::expect_true("EM_b" %in% names(try_function))
})
testthat::test_that("bin statistics are calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
try_function <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_true("TA_b" %in% names(try_function))
testthat::expect_true("TD_b" %in% names(try_function))
testthat::expect_true("EM_b" %in% names(try_function))
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= 0))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1 && rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1, rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1) || all(rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1) && all(rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("confidence intervals are correctly computed in final RMM", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("bootstrap_RMM_LL" %in% names(rmm_result))
testthat::expect_true("bootstrap_RMM_UL" %in% names(rmm_result))
testthat::expect_true("bootstrap_CI" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$bootstrap_RMM_UL > rmm_result$bootstrap_RMM_LL))  # CI upper should be greater than lower
})
testthat::test_that("confidence intervals are correctly computed in final RMM", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_true("bootstrap_RMM_LL" %in% names(rmm_result))
testthat::expect_true("bootstrap_RMM_UL" %in% names(rmm_result))
testthat::expect_true("bootstrap_CI" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$bootstrap_RMM_UL > rmm_result$bootstrap_RMM_LL))  # CI upper should be greater than lower
})
testthat::test_that("RMM final data is correctly sorted by bin_number", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result_final <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_equal(min(rmm_result_final$bin_number), 1)
testthat::expect_equal(max(rmm_result_final$bin_number), 5)  # Assuming 5 bins
})
testthat::test_that("RMM final data is correctly sorted by bin_number", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result_final <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_equal(min(rmm_result_final$bin_number), 1)
testthat::expect_equal(max(rmm_result_final$bin_number), 10)  # Assuming 5 bins
})
devtools::test_coverage_active_file()
revdepcheck::revdep_check(num_workers = 4)
install.packages(c("Matrix", "nlme"))
usethis::use_github_links()
urlchecker::url_check()
urlchecker::url_update()
devtools::build_readme()
devtools::check()
revdepcheck::revdep_check(num_workers = 4)
revdepcheck::revdep_check(num_workers = 4)
?revdepcheck::revdep_check
revdepcheck::revdep_check(num_workers = 4, cran = F)
devtools::install()
revdepcheck::revdep_check(num_workers = 4)
devtools::check(remote = T, manual = T)
devtools::document()
pkgload::dev_help('traumar-package')
?traumar
devtools::check(remote = T, manual = T)
devtools::document()
devtools::check(remote = T, manual = T)
devtools::check(remote = T, manual = T)
devtools::document()
devtools::check(remote = T, manual = T)
usethis::use_version("major")
devtools::check(remote = T, manual = T)
devtools::submit_cran()
devtools::load_all()
?traumar
?nemsqar
