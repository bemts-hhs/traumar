set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps_col,
outcome_col = outcome_col,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps_col,
outcome_col = survival,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 10,
divisor2 = 20,
threshold_1 = 0.2,
threshold_2 = 0.8
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 5,
divisor2 = 5,
threshold_1 = 0.9,
threshold_2 = 0.99
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 5)  # assuming 5 bins
})
testthat::test_that("nonlinear_bins produces correct bin data", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bin_data <- nonlinear_bins(
df,
Ps_col = Ps,
outcome_col = survival,
divisor1 = 5,
divisor2 = 5,
threshold_1 = 0.9,
threshold_2 = 0.99
)
testthat::expect_true("bin_stats" %in% names(bin_data))
testthat::expect_true("intervals" %in% names(bin_data))
testthat::expect_equal(nrow(bin_data$bin_stats), 10)  # assuming 5 bins
})
testthat::test_that("bootstrap data has the correct number of samples", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
bootstrap_data <- df |>
infer::generate(reps = 100, type = "bootstrap")
testthat::expect_equal(nrow(bootstrap_data), 100 * nrow(df))
})
testthat::test_that("bin statistics are calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
try_function <- rm_bin_summary(df, Ps, survival, n_samples = 100)
bin_summary <- df |>
dplyr::summarize(
TA_b = sum(alive, na.rm = TRUE),
TD_b = sum(dead, na.rm = TRUE),
N_b = sum(count),
EM_b = TD_b / N_b
)
testthat::expect_true("TA_b" %in% names(try_function))
testthat::expect_true("TD_b" %in% names(try_function))
testthat::expect_true("EM_b" %in% names(try_function))
})
testthat::test_that("bin statistics are calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
try_function <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_true("TA_b" %in% names(try_function))
testthat::expect_true("TD_b" %in% names(try_function))
testthat::expect_true("EM_b" %in% names(try_function))
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= 0))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1 && rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1, rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1) || all(rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("RMM is calculated correctly", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- df |>
rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("population_RMM" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$population_RMM >= -1) && all(rmm_result$population_RMM <= 1))  # RMM should be non-negative
})
testthat::test_that("confidence intervals are correctly computed in final RMM", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- rm_bin_summary(Ps, survival, n_samples = 100)
testthat::expect_true("bootstrap_RMM_LL" %in% names(rmm_result))
testthat::expect_true("bootstrap_RMM_UL" %in% names(rmm_result))
testthat::expect_true("bootstrap_CI" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$bootstrap_RMM_UL > rmm_result$bootstrap_RMM_LL))  # CI upper should be greater than lower
})
testthat::test_that("confidence intervals are correctly computed in final RMM", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_true("bootstrap_RMM_LL" %in% names(rmm_result))
testthat::expect_true("bootstrap_RMM_UL" %in% names(rmm_result))
testthat::expect_true("bootstrap_CI" %in% names(rmm_result))
testthat::expect_true(all(rmm_result$bootstrap_RMM_UL > rmm_result$bootstrap_RMM_LL))  # CI upper should be greater than lower
})
testthat::test_that("RMM final data is correctly sorted by bin_number", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result_final <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_equal(min(rmm_result_final$bin_number), 1)
testthat::expect_equal(max(rmm_result_final$bin_number), 5)  # Assuming 5 bins
})
testthat::test_that("RMM final data is correctly sorted by bin_number", {
set.seed(01232025)
# Test missing Ps_col
df <- tibble::tibble(Ps = plogis(rnorm(1000, mean = 2, sd = 1.5)), survival = rbinom(1000, 1, prob = 0.9))
rmm_result_final <- rm_bin_summary(df, Ps, survival, n_samples = 100)
testthat::expect_equal(min(rmm_result_final$bin_number), 1)
testthat::expect_equal(max(rmm_result_final$bin_number), 10)  # Assuming 5 bins
})
devtools::test_coverage_active_file()
revdepcheck::revdep_check(num_workers = 4)
install.packages(c("Matrix", "nlme"))
usethis::use_github_links()
urlchecker::url_check()
urlchecker::url_update()
devtools::build_readme()
devtools::check()
revdepcheck::revdep_check(num_workers = 4)
revdepcheck::revdep_check(num_workers = 4)
?revdepcheck::revdep_check
revdepcheck::revdep_check(num_workers = 4, cran = F)
devtools::install()
revdepcheck::revdep_check(num_workers = 4)
devtools::check(remote = T, manual = T)
devtools::document()
pkgload::dev_help('traumar-package')
?traumar
devtools::check(remote = T, manual = T)
devtools::document()
devtools::check(remote = T, manual = T)
devtools::check(remote = T, manual = T)
devtools::document()
devtools::check(remote = T, manual = T)
usethis::use_version("major")
devtools::check(remote = T, manual = T)
devtools::submit_cran()
devtools::load_all()
?traumar
?nemsqar
devtools::load_all()
usethis::use_pkgdown_github_pages()
devtools::document()
usethis::use_github_action("pkgdown")
devtools::build_site()
pkgdown::clean_cache()
pkgdown::clean_site()
pkgdown::clean_site()
pkgdown::build_site_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
devtools::document()
?traumar
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
test_that("probability_of_survival handles valid inputs correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expected <- c(
1 / (1 + exp(-(-0.4499 + 0.8085 * 7.84 - 0.0835 * 10 - (1.7430 * 0)))),
1 / (1 + exp(-(-2.5355 + 0.9934 * 6.90 - 0.0651 * 25 - (1.1360 * 1))))
)
result <- probability_of_survival(trauma_type, age, rts, iss)
expect_equal(result, round(expected, digits = 3))
})
# Test invalid trauma_type
test_that("probability_of_survival handles invalid trauma_type", {
trauma_type <- c("Blunt", "Unknown")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid age
test_that("probability_of_survival handles invalid age", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(-5, 60)  # Negative age
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid rts
test_that("probability_of_survival handles invalid rts", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(8, 6.90)  # Out of range RTS
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid iss
test_that("probability_of_survival handles invalid iss", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 80)  # Out of range ISS
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid iss
test_that("probability_of_survival handles invalid iss", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 80)  # Out of range ISS
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
document()
library(devtools)
library(testthat)
library(usethis)
library(roxygen2)
library(roxygen2md)
document()
load_all()
# Test invalid rts
test_that("probability_of_survival handles invalid rts", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(8, 6.90)  # Out of range RTS
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid iss
test_that("probability_of_survival handles invalid iss", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 80)  # Out of range ISS
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid age
test_that("probability_of_survival handles invalid age", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(-5, 60)  # Negative age
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid rts
test_that("probability_of_survival handles invalid rts", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(8, 6.90)  # Out of range RTS
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test invalid iss
test_that("probability_of_survival handles invalid iss", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 80)  # Out of range ISS
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test handling of 'Burn' trauma type
test_that("probability_of_survival warns about 'Burn' trauma type", {
trauma_type <- c("Blunt", "Burn")
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", NA)
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_error(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", NA)
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_error(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
expect_no_success(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, "seven point eight four")
iss <- c(10, 25)
testthat::expect_failure(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
testthat::expect_failure(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
testthat::expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
testthat::expect_success(probability_of_survival(trauma_type, age, rts, iss))
})
trauma_type <- c("Blunt", "Penetrating")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
probability_of_survival(trauma_type, age, rts, iss)
trauma_type <- c("Blunt", "stuff")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
probability_of_survival(trauma_type, age, rts, iss)
# Test NA handling
test_that("probability_of_survival handles invalid values correctly", {
trauma_type <- c("Blunt", "stuff")
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, 25)
testthat::expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
rm(list = ls())
# Test NA handling
test_that("probability_of_survival handles NA values correctly", {
trauma_type <- c("Blunt", NA)
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, NA)
expect_success(probability_of_survival(trauma_type, age, rts, iss))
})
# Test NA handling
test_that("probability_of_survival handles NA values correctly", {
trauma_type <- c("Blunt", NA)
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, NA)
expect_warning(probability_of_survival(trauma_type, age, rts, iss))
})
devtools::test_coverage_active_file()
# Test error in trauma_type
test_that("probability_of_survival handles invalid trauma_type", {
trauma_type <- c(2, 1)
age <- c(30, 60)
rts <- c(7.84, 6.90)
iss <- c(10, 25)
expect_error(probability_of_survival(trauma_type, age, rts, iss))
})
devtools::test_coverage_active_file()
trauma_type <- c("Blunt", NA)
age <- c(30, 60)
rts <- c(7.84, NA)
iss <- c(10, NA)
probability_of_survival(trauma_type, age, rts, iss)
rm(list = ls())
devtools::document()
devtools::load_all()
devtools::load_all(".")
library(devtools)
library(testthat)
library(roxygen2)
library(roxygen2md)
document()
load_all()
build_readme()
check()
?traumar
document()
build_readme()
check()
?traumar
devtools::test_coverage()
unload()
devtools::test_coverage()
use_github_action("test-coverage")
use_pkgdown_github_pages()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
devtools::submit_cran()
